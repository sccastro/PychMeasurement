require(tidyverse)
# install.packages("forcats") # You might need this because it doesn't load with the tidyverse.
rm(list = ls())
require(tidyverse)
require(forcats)
ordered_rincome <-rincome_summary %>%
mutate(rincome = fct_relevel(rincome, "Not applicable", after = 0))
rm(list = ls())
require(tidyverse)
require(forcats)
levels(gss_cat$rincome)
#Releveling factors with forcats
df <- forcats::gss_cat
?gss_cat #See more about the variables in our dataset
View(gss_cat)
gss_cat %>%
count(race) #We can see counts of each race or religion
gss_cat %>%
count(relig) %>%
arrange(desc(n)) #We can arrange them in descending order on the count column (n)
gss_cat %>%
count(age) #Or we can count by age...
gss_cat %>%
count(race) %>%
mutate(freq = (n / sum(n))*100) #We can see relative proportions in the sample
#Remember, none of these outcomes are being saved into any objects with <-
#This is just for visualizing and exploring the data.
#We can visualize this information with ggplot2
require(ggplot2) #We will get more into ggplot next week,
#but for now here is an introduction.
ggplot(data = gss_cat, mapping = aes(race)) +
geom_bar()
# By default, ggplot2 will drop levels that donâ€™t have any values.
# You can force them to display with:
ggplot(gss_cat, aes(race)) +
geom_bar() +
scale_x_discrete(drop = FALSE)
(relig_summary <- df %>% #Get your data.frame and pipe into the columns
group_by(relig) %>% #group by religion so that each summary will be for one religion
summarise( #Get a summary for the following transformations
age = mean(age, na.rm = TRUE), #Get the mean of age and name it "age"
tvhours = mean(tvhours, na.rm = TRUE), #Get the mean of tv hours and name it "tvhours"
n = n() #Count the number of observations in each group
))
ggplot(data = relig_summary,
mapping = aes(y = relig, x =tvhours)) +
geom_point()
ggplot(relig_summary, aes(tvhours, fct_reorder(relig, tvhours))) +
geom_point()
ggplot(relig_summary, aes(tvhours, fct_reorder(relig, desc(tvhours)))) +
geom_point()
relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)) %>%
ggplot(aes(tvhours, relig)) +
geom_point()
levels(relig_summary$relig)
(testlevel <- relig_summary %>%
mutate(relig = fct_reorder(relig, tvhours)))
levels(testlevel$relig) #The levels have changed even if the visualization did not.
(rincome_summary <- df %>% #Save your df summary as something descriptive
group_by(rincome) %>% #Group by income so that all summaries will be for those levels
summarise( #Create summaries for the following:
age = mean(age, na.rm = TRUE), #Mean age with Na's removed named "age"
tvhours = mean(tvhours, na.rm = TRUE), #Mean tvhours named "tvhours"
n = n() #Count number of observations in each column
))
ggplot(rincome_summary, aes(age, fct_reorder(rincome, age))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
ggplot(rincome_summary, aes(age,fct_relevel(desc(rincome), "Not applicable"))) +
geom_point()
ggplot(rincome_summary, aes(age,fct_relevel(desc(rincome), "Not applicable"))) +
geom_point()
ggplot(rincome_summary, aes(age, fct_relevel(rincome, "Not applicable"))) +
geom_point()
library(RColorBrewer)
display.brewer.all()
brewer.pal.info
pal1 <- brewer.pal(n = 6, "Dark2") #Try different palettes
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
scale_color_brewer(palette = "Dark2") +
geom_line() + theme_classic() +
labs(colour = "marital")
by_age <- df %>% #Get data.frame
filter(!is.na(age)) %>% #Get rid of Na's in age to do maths
count(age, marital) %>% # count observations by age and marital status
group_by(age) %>% #Group by age for the following summary
mutate(prop = n / sum(n)) #Get proportion of counts per age
ggplot(by_age, aes(age, prop, colour = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital")
library(RColorBrewer)
display.brewer.all()
brewer.pal.info
pal1 <- brewer.pal(n = 6, "Dark2") #Try different palettes
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
scale_color_brewer(palette = "Dark2") +
geom_line() + theme_classic() +
labs(colour = "marital")
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital") + theme_dark() +
scale_color_brewer(palette = "Accent")
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital") + theme_void() +
scale_color_brewer(type = "qual")
df %>% #Get data.frame
filter(!is.na(age))
by_age <- df %>% #Get data.frame
filter(!is.na(age)) %>% #Get rid of Na's in age to do maths
count(age, marital) %>% # count observations by age and marital status
group_by(age) %>% #Group by age for the following summary
mutate(prop = n / sum(n)) #Get proportion of counts per age
ggplot(by_age, aes(age, prop, colour = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital")
df
by_age <- df %>% #Get data.frame
filter(!is.na(age)) %>% #Get rid of Na's in age to do maths
count(age, marital) %>% # count observations by age and marital status
group_by(age) %>% #Group by age for the following summary
mutate(prop = n / sum(n)) #Get proportion of counts per age
ggplot(by_age, aes(age, prop, colour = marital)) +
geom_line(na.rm = TRUE)
environment(filter)
rm(list = ls()) #clear environment
require(tidyverse) #You can use require() or library() to load the package
ggplot2::mpg[1,2]
ggplot2::mpg[1,1:2]
ggplot2::mpg[1,1:]
ggplot2::mpg[1,1:7]
ggplot2::mpg[1,1:8]
ggplot2::mpg[1,1:9]
ggplot2::mpg[1,1:10]
ggplot2::mpg[1,1:11]
ggplot2::mpg[1,1:12]
ggplot2::mpg[1,1:11]
kable(ggplot2::mpg[1,1:11])
rm(list = ls()) #clear environment
require(tidyverse) #You can use require() or library() to load the package
require(kableExtra)
rm(list = ls()) #clear environment
require(tidyverse) #You can use require() or library() to load the package
require(kableExtra)
kable(ggplot2::mpg[1,1:11])
kable(ggplot2::mpg[1,1:11])
kable(ggplot2::mpg[1,1:11])
ggplot(data = df) +
geom_point(mapping = aes(x = displ, y = hwy, color = "blue"))
ggplot2::mpg
df <- ggplot2::mpg
dim(df)
str(df) #what kind of classes are we dealing with?
?mpg
stem(mpg$displ)
hist(mpg$displ)
df %>% #the tibble
ggplot(aes(x = displ, y = hwy)) + #the x and y coordinates (what goes on the axes)
geom_point() #marks that represent the data values
require(tidyverse)
#Example 1.
my.axis.font<-theme(axis.title.x = element_text(size=18), axis.title.y = element_text(size=18),
axis.text.x = element_text(size=18), axis.text.y = element_text(size=18),
plot.title=element_text(size=18,face="bold", hjust = .5),
legend.title=element_text(size=14),legend.text=element_text(size=14))
# theme_mine <- theme(...)
# example 2.
### XKCD theme
theme_xkcd2 <- theme(
panel.background = element_rect(fill="white"),
axis.ticks = element_line(colour=NA),
panel.grid = element_line(colour="white"),
axis.text.y = element_text(colour=NA),
axis.text.x = element_text(colour="black"),
text = element_text(size=16, family="Humor Sans")
)
###Jittery line###
xkcd_line <- function(x, y, color) {
len <- length(x);
rg <- par("usr");
yjitter <- (rg[4] - rg[3]) / 1000;
xjitter <- (rg[2] - rg[1]) / 1000;
x_mod <- x + rnorm(len) * xjitter;
y_mod <- y + rnorm(len) * yjitter;
lines(x_mod, y_mod, col='white', lwd=10);
lines(x_mod, y_mod, col=color, lwd=5);
}
###Off-axis###
xkcd_axis <- function() {
rg <- par("usr");
yaxis <- 1:100 / 100 * (rg[4] - rg[3]) + rg[3];
xaxis <- 1:100 / 100 * (rg[2] - rg[1]) + rg[1];
xkcd_line(1:100 * 0 + rg[1] + (rg[2]-rg[1])/100, yaxis,'black')
xkcd_line(xaxis, 1:100 * 0 + rg[3] + (rg[4]-rg[3])/100, 'black')
}
#Now use it to  plot some graphs.
mpg %>%
ggplot() + geom_point(aes(x = displ, y = hwy, color = class)) +
labs(title = "My Plot") +
my.axis.font
#Some squiggly lines:
d <- data.frame(x=1:100)
d$one <- exp(-((d$x - 50)/10)^2)
d$two <- sin(d$x/10)
plot.new()
plot.window(
c(min(d$x),max(d$x)),
c(min(c(d$one,d$two)),max(c(d$one,d$two))))
xkcd_axis()
#Some squiggly lines:
d <- data.frame(x=1:100)
d$one <- exp(-((d$x - 50)/10)^2)
d$two <- sin(d$x/10)
plot.new()
plot.window(
c(min(d$x),max(d$x)),
c(min(c(d$one,d$two)),max(c(d$one,d$two))))
# xkcd_axis()
xkcd_line(d$x, d$one, 'red')
d <- data.frame(x=1:100)
d$one <- exp(-((d$x - 50)/10)^2)
d$two <- sin(d$x/10)
plot.new()
plot.window(
c(min(d$x),max(d$x)),
c(min(c(d$one,d$two)),max(c(d$one,d$two))))
xkcd_axis()
xkcd_line(d$x, d$one, 'red')
xkcd_line(d$x, d$two, 'blue')
rm(list = ls()) #clear environment
require(tidyverse) #You can use require() or library() to load the package
require(kableExtra)
kable(ggplot2::mpg[1,1:11])
df <- ggplot2::mpg
dim(df)
str(df) #what kind of classes are we dealing with?
stem(mpg$displ)
hist(mpg$displ)
plot(mpg$displ)
plot(mpg$cty, mpg$hwy)
df %>% #the tibble
ggplot(aes(x = displ, y = hwy)) + #the x and y coordinates (what goes on the axes)
geom_point() #marks that represent the data values
qplot(x = displ, y = hwy, data = df, geom = "point")
df %>%
ggplot(aes(displ, hwy)) +
geom_point() +
geom_smooth()
ggplot(data = df, mapping = aes(x = displ, y = hwy)) +
geom_smooth() + geom_point()
ggplot(data = df, mapping = aes(x = displ, y = hwy)) +
geom_point(aes(color = displ > 5 & hwy > 20)) + geom_smooth()
View(df %>%
filter(displ > 5 & hwy > 20))
load("old/eyedata.RData")
load("data/eyedata.RData")
df %>%
mutate(dif = Stop - Start) %>%
group_by(Participant) %>%
ggplot(aes(x = Participant, y = dif, group = Participant)) +
geom_boxplot()
df %>%
mutate(dif = Stop - Start) %>%
group_by(Participant) %>%
ggplot(aes(x = Participant, y = dif, group = Participant)) +
geom_boxplot()
df <- mpg
df <- mpg
df %>%
ggplot(aes(x = displ, y = hwy)) + geom_bin2d()
